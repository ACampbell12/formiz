(window.webpackJsonp=window.webpackJsonp||[]).push([[14],{156:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return l})),t.d(n,"rightToc",(function(){return s})),t.d(n,"default",(function(){return c}));t(167),t(170),t(169),t(171),t(172),t(0);var i=t(178),a=t(194);function r(){return(r=Object.assign||function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var i in t)Object.prototype.hasOwnProperty.call(t,i)&&(e[i]=t[i])}return e}).apply(this,arguments)}var l={id:"rules",title:"Validation Rules"},s=[{value:"isRequired()",id:"isrequired",children:[]},{value:"isNotEmptyString()",id:"isnotemptystring",children:[]},{value:"isNotEmptyArray()",id:"isnotemptyarray",children:[]},{value:"isEmail()",id:"isemail",children:[]},{value:"isNumber()",id:"isnumber",children:[]},{value:"isLength(length)",id:"islengthlength",children:[]},{value:"isMinLength(length)",id:"isminlengthlength",children:[]},{value:"isMaxLength(length)",id:"ismaxlengthlength",children:[]}],o={rightToc:s},m="wrapper";function c(e){var n=e.components,t=function(e,n){if(null==e)return{};var t,i,a={},r=Object.keys(e);for(i=0;i<r.length;i++)t=r[i],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,["components"]);return Object(i.b)(m,r({},o,t,{components:n,mdxType:"MDXLayout"}),Object(i.b)("h3",{id:"isrequired"},"isRequired()"),Object(i.b)("blockquote",null,Object(i.b)("p",{parentName:"blockquote"},"Test if there is value.")),Object(i.b)("pre",null,Object(i.b)("code",r({parentName:"pre"},{className:"language-jsx"}),"import { isRequired } from '@formiz/validations'\n\n<MyField\n  name=\"fieldName\"\n  validations={[\n    {\n      rule: isRequired(),\n      message: 'This field is required',\n    },\n  ]}\n>\n")),Object(i.b)("h3",{id:"isnotemptystring"},"isNotEmptyString()"),Object(i.b)("blockquote",null,Object(i.b)("p",{parentName:"blockquote"},"Test if a string has not only spaces.")),Object(i.b)("pre",null,Object(i.b)("code",r({parentName:"pre"},{className:"language-jsx"}),"import { isNotEmptyString } from '@formiz/validations'\n\n<MyField\n  name=\"fieldName\"\n  validations={[\n    {\n      rule: isNotEmptyString(),\n      message: 'This field can\\'t be empty',\n    },\n  ]}\n>\n")),Object(i.b)("h3",{id:"isnotemptyarray"},"isNotEmptyArray()"),Object(i.b)("blockquote",null,Object(i.b)("p",{parentName:"blockquote"},"Test if an array is not empty.")),Object(i.b)("pre",null,Object(i.b)("code",r({parentName:"pre"},{className:"language-jsx"}),"import { isNotEmptyArray } from '@formiz/validations'\n\n<MyField\n  name=\"fieldName\"\n  validations={[\n    {\n      rule: isNotEmptyArray(),\n      message: 'This array can\\'t be empty',\n    },\n  ]}\n>\n")),Object(i.b)("h3",{id:"isemail"},"isEmail()"),Object(i.b)("blockquote",null,Object(i.b)("p",{parentName:"blockquote"},"Test if a string is an valid email.")),Object(i.b)("pre",null,Object(i.b)("code",r({parentName:"pre"},{className:"language-jsx"}),"import { isEmail } from '@formiz/validations'\n\n<MyField\n  name=\"fieldName\"\n  validations={[\n    {\n      rule: isEmail(),\n      message: 'This is not a valid email',\n    },\n  ]}\n>\n")),Object(i.b)("h3",{id:"isnumber"},"isNumber()"),Object(i.b)(a.b,{of:"isNumber()",mdxType:"NotImplemented"}),Object(i.b)("blockquote",null,Object(i.b)("p",{parentName:"blockquote"},"Test if the value is a number.")),Object(i.b)("pre",null,Object(i.b)("code",r({parentName:"pre"},{className:"language-jsx"}),"import { isNumber } from '@formiz/validations'\n\n<MyField\n  name=\"fieldName\"\n  validations={[\n    {\n      rule: isNumber(),\n      message: 'This is not a number',\n    },\n  ]}\n>\n")),Object(i.b)("h3",{id:"islengthlength"},"isLength(length)"),Object(i.b)(a.b,{of:"isLength(length)",mdxType:"NotImplemented"}),Object(i.b)("blockquote",null,Object(i.b)("p",{parentName:"blockquote"},"Test if a string or an array has a specific length.")),Object(i.b)("pre",null,Object(i.b)("code",r({parentName:"pre"},{className:"language-jsx"}),"import { isLength } from '@formiz/validations'\n\n<MyField\n  name=\"fieldName\"\n  validations={[\n    {\n      rule: isLength(4),\n      message: 'This has not a length of 4',\n    },\n  ]}\n>\n")),Object(i.b)("h3",{id:"isminlengthlength"},"isMinLength(length)"),Object(i.b)(a.b,{of:"isMinLength(length)",mdxType:"NotImplemented"}),Object(i.b)("blockquote",null,Object(i.b)("p",{parentName:"blockquote"},"Test if a string or an array has a minimum length.")),Object(i.b)("pre",null,Object(i.b)("code",r({parentName:"pre"},{className:"language-jsx"}),"import { isMinLength } from '@formiz/validations'\n\n<MyField\n  name=\"fieldName\"\n  validations={[\n    {\n      rule: isMinLength(4),\n      message: 'This should at least have a length of 4',\n    },\n  ]}\n>\n")),Object(i.b)("h3",{id:"ismaxlengthlength"},"isMaxLength(length)"),Object(i.b)(a.b,{of:"isMaxLength(length)",mdxType:"NotImplemented"}),Object(i.b)("blockquote",null,Object(i.b)("p",{parentName:"blockquote"},"Test if a string or an array has a maximum length.")),Object(i.b)("pre",null,Object(i.b)("code",r({parentName:"pre"},{className:"language-jsx"}),"import { isMaxLength } from '@formiz/validations'\n\n<MyField\n  name=\"fieldName\"\n  validations={[\n    {\n      rule: isMaxLength(4),\n      message: 'This should have a length of 4 or less',\n    },\n  ]}\n>\n")))}c.isMDXComponent=!0},194:function(e,n,t){"use strict";var i=t(0),a=t.n(i),r=function(){return a.a.createElement("div",{className:"callout is-warning"},"This is an"," ",a.a.createElement("strong",null,"early and alpha release")," ","of Formiz."," ","API is subject to change."," ",a.a.createElement("strong",null,"Do not use in production."))},l=t(13),s=t.n(l),o=function(e){var n=e.of;return a.a.createElement("div",{className:"callout is-warning"},"Work in Progress."," ",a.a.createElement("strong",null,n)," ","is not implemented yet.")};o.propTypes={of:s.a.string},o.defaultProps={of:"This"};var m=function(e){var n=e.of;return a.a.createElement("div",{className:"callout is-warning"},"Work in Progress."," ",a.a.createElement("strong",null,"@formiz/",n)," ","is not published on NPM yet.")};m.propTypes={of:s.a.string},m.defaultProps={of:"core"};t.d(n,"a",(function(){return r})),t.d(n,"b",(function(){return o}))}}]);