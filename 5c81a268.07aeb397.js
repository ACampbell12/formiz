(window.webpackJsonp=window.webpackJsonp||[]).push([[9],{114:function(e,n,t){"use strict";t.d(n,"a",(function(){return s})),t.d(n,"b",(function(){return m}));var a=t(0),l=t.n(a);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function c(e,n){if(null==e)return{};var t,a,l=function(e,n){if(null==e)return{};var t,a,l={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(l[t]=e[t]);return l}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(l[t]=e[t])}return l}var d=l.a.createContext({}),u=function(e){var n=l.a.useContext(d),t=n;return e&&(t="function"==typeof e?e(n):o({},n,{},e)),t},s=function(e){var n=u(e.components);return l.a.createElement(d.Provider,{value:n},e.children)},b={inlineCode:"code",wrapper:function(e){var n=e.children;return l.a.createElement(l.a.Fragment,{},n)}},p=Object(a.forwardRef)((function(e,n){var t=e.components,a=e.mdxType,r=e.originalType,i=e.parentName,d=c(e,["components","mdxType","originalType","parentName"]),s=u(t),p=a,m=s["".concat(i,".").concat(p)]||s[p]||b[p]||r;return t?l.a.createElement(m,o({ref:n},d,{components:t})):l.a.createElement(m,o({ref:n},d))}));function m(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var r=t.length,i=new Array(r);i[0]=p;var o={};for(var c in n)hasOwnProperty.call(n,c)&&(o[c]=n[c]);o.originalType=e,o.mdxType="string"==typeof e?e:a,i[1]=o;for(var d=2;d<r;d++)i[d]=t[d];return l.a.createElement.apply(null,i)}return l.a.createElement.apply(null,t)}p.displayName="MDXCreateElement"},564:function(e,n,t){"use strict";var a=t(0),l=t.n(a);var r=t(8),i=t.n(r);const o=({of:e})=>l.a.createElement("div",{className:"callout is-warning"},"Work in Progress."," ",l.a.createElement("strong",null,e)," ","is not implemented yet.");o.propTypes={of:i.a.string},o.defaultProps={of:"This"};const c=({of:e})=>l.a.createElement("div",{className:"callout is-warning"},"Work in Progress."," ",l.a.createElement("strong",null,"@formiz/",e)," ","is not published on NPM yet.");c.propTypes={of:i.a.string},c.defaultProps={of:"core"}},98:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return i})),t.d(n,"metadata",(function(){return o})),t.d(n,"rightToc",(function(){return c})),t.d(n,"default",(function(){return u}));var a=t(1),l=t(6),r=(t(0),t(114)),i=(t(564),{id:"use-field",title:"useField() hook"}),o={id:"core/use-field",title:"useField() hook",description:"import { NotImplemented } from '../../src/messages'",source:"@site/docs/core/useField-hook.mdx",permalink:"/docs/core/use-field",sidebar:"docs",previous:{title:"useForm() hook",permalink:"/docs/core/use-form"},next:{title:"Validation Rules",permalink:"/docs/validations/rules"}},c=[{value:"Concept",id:"concept",children:[]},{value:"Hook values",id:"hook-values",children:[{value:"<code>value</code>",id:"value",children:[]},{value:"<code>valueDebounced</code>",id:"valuedebounced",children:[]},{value:"<code>setValue()</code>",id:"setvalue",children:[]},{value:"<code>id</code>",id:"id",children:[]},{value:"<code>isValid</code>",id:"isvalid",children:[]},{value:"<code>isPristine</code>",id:"ispristine",children:[]},{value:"<code>isSubmitted</code>",id:"issubmitted",children:[]},{value:"<code>errorMessage</code>",id:"errormessage",children:[]},{value:"<code>errorMessages</code>",id:"errormessages",children:[]},{value:"<code>resetKey</code>",id:"resetkey",children:[]}]},{value:"Field props",id:"field-props",children:[{value:"<code>name</code> *",id:"name-",children:[]},{value:"<code>debounce</code>",id:"debounce",children:[]},{value:"<code>defaultValue</code>",id:"defaultvalue",children:[]},{value:"<code>keepValue</code>",id:"keepvalue",children:[]},{value:"<code>formatValue(fieldValue)</code>",id:"formatvaluefieldvalue",children:[]},{value:"<code>onChange(fieldValue)</code>",id:"onchangefieldvalue",children:[]},{value:"<code>required</code>",id:"required",children:[]},{value:"<code>validations</code>",id:"validations",children:[]}]},{value:"PropTypes validations",id:"proptypes-validations",children:[]}],d={rightToc:c};function u(e){var n=e.components,t=Object(l.a)(e,["components"]);return Object(r.b)("wrapper",Object(a.a)({},d,t,{components:n,mdxType:"MDXLayout"}),Object(r.b)("h2",{id:"concept"},"Concept"),Object(r.b)("p",null,"When using the ",Object(r.b)("inlineCode",{parentName:"p"},"useField")," hook, you need to pass your component ",Object(r.b)("inlineCode",{parentName:"p"},"props")," to the hook."),Object(r.b)("p",null,"Then the hook gives you access to the field state."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-jsx"}),"import React from 'react'\nimport { useField } from '@formiz/core'\n\nconst MyField = (props) => {\n  const {\n    value,\n    setValue,\n    isValid,\n    errorMessage,\n  } = useField(props)\n\n  return (\n    ...\n  )\n}\n")),Object(r.b)("hr",null),Object(r.b)("h2",{id:"hook-values"},"Hook values"),Object(r.b)("p",null,"The ",Object(r.b)("inlineCode",{parentName:"p"},"useField")," return an object with the following properties:"),Object(r.b)("h3",{id:"value"},Object(r.b)("inlineCode",{parentName:"h3"},"value")),Object(r.b)("p",null,"Get the current value of the field."),Object(r.b)("h3",{id:"valuedebounced"},Object(r.b)("inlineCode",{parentName:"h3"},"valueDebounced")),Object(r.b)("p",null,"Get the current value of the field, but sync with the debouncing.\nIt can be useful to determinate when to show error messages."),Object(r.b)("h3",{id:"setvalue"},Object(r.b)("inlineCode",{parentName:"h3"},"setValue()")),Object(r.b)("p",null,"Set the value of the field."),Object(r.b)("h3",{id:"id"},Object(r.b)("inlineCode",{parentName:"h3"},"id")),Object(r.b)("p",null,"Return a unique id."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-jsx"}),"<label htmlFor={id}>...</label>\n<input id={id} />\n")),Object(r.b)("h3",{id:"isvalid"},Object(r.b)("inlineCode",{parentName:"h3"},"isValid")),Object(r.b)("p",null,"Returns ",Object(r.b)("inlineCode",{parentName:"p"},"true")," if the field is valid."),Object(r.b)("h3",{id:"ispristine"},Object(r.b)("inlineCode",{parentName:"h3"},"isPristine")),Object(r.b)("p",null,"Returns ",Object(r.b)("inlineCode",{parentName:"p"},"true")," if the field has not been changed."),Object(r.b)("h3",{id:"issubmitted"},Object(r.b)("inlineCode",{parentName:"h3"},"isSubmitted")),Object(r.b)("p",null,"Returns ",Object(r.b)("inlineCode",{parentName:"p"},"true")," either if the current step or the form is submitted."),Object(r.b)("h3",{id:"errormessage"},Object(r.b)("inlineCode",{parentName:"h3"},"errorMessage")),Object(r.b)("p",null,"Returns the first error message."),Object(r.b)("h3",{id:"errormessages"},Object(r.b)("inlineCode",{parentName:"h3"},"errorMessages")),Object(r.b)("p",null,"Returns all error messages."),Object(r.b)("h3",{id:"resetkey"},Object(r.b)("inlineCode",{parentName:"h3"},"resetKey")),Object(r.b)("p",null,"Allows you to put a key on elements that you want to be reinitialize when the from is reset.",Object(r.b)("br",null),"\nCan be useful for element like ",Object(r.b)("inlineCode",{parentName:"p"},"<input>")," or ",Object(r.b)("inlineCode",{parentName:"p"},"<select>"),"."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-jsx"}),"<input key={resetKey} />\n")),Object(r.b)("hr",null),Object(r.b)("h2",{id:"field-props"},"Field props"),Object(r.b)("p",null,"When a component is created with the ",Object(r.b)("inlineCode",{parentName:"p"},"useField()")," hook,\nyou can pass the following props to the component."),Object(r.b)("h3",{id:"name-"},Object(r.b)("inlineCode",{parentName:"h3"},"name")," *"),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"Required")),Object(r.b)("p",null,"The name is required to register the field in the form."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-jsx"}),'<Field name="myFieldName" />\n')),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"Nested objects")),Object(r.b)("p",null,"The ",Object(r.b)("inlineCode",{parentName:"p"},"name")," props can use lodash-like dot paths to reference nested values."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-jsx"}),"<Field name=\"fieldA\" />\n<Field name=\"fieldB\" />\n<Field name=\"myGroup.fieldA\" />\n<Field name=\"myGroup.fieldB\" />\n\n/* Form values\n{\n  fieldA: 'value',\n  fieldB: 'value',\n  myGroup: {\n    fieldA: 'value',\n    fieldB: 'value',\n  },\n}\n*/\n")),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"Arrays")),Object(r.b)("p",null,"The ",Object(r.b)("inlineCode",{parentName:"p"},"name")," props allow also arrays and arrays of objects out of the box.\nUsing lodash-like bracket syntax for ",Object(r.b)("inlineCode",{parentName:"p"},"name")," allow you to handle fields in a list."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-jsx"}),"<Field name=\"myArray[0]\" />\n<Field name=\"myArray[1]\" />\n<Field name=\"myArrayOfObjects[0].fieldA\" />\n<Field name=\"myArrayOfObjects[0].fieldB\" />\n<Field name=\"myArrayOfObjects[1].fieldA\" />\n<Field name=\"myArrayOfObjects[1].fieldB\" />\n\n/* Form values\n{\n  myArray: ['value', 'value'],\n  myArrayOfObjects: [\n    { fieldA: 'value', fieldB: 'value' },\n    { fieldA: 'value', fieldB: 'value' },\n  ],\n}\n*/\n")),Object(r.b)("h3",{id:"debounce"},Object(r.b)("inlineCode",{parentName:"h3"},"debounce")),Object(r.b)("p",null,"Number of milliseconds for debouncing validations. (default is ",Object(r.b)("inlineCode",{parentName:"p"},"100"),")."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-jsx"}),'<Field name="myFieldName" debounce={200} />\n')),Object(r.b)("h3",{id:"defaultvalue"},Object(r.b)("inlineCode",{parentName:"h3"},"defaultValue")),Object(r.b)("p",null,"Pass an initial value to the field."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-jsx"}),'<Field name="myFieldName" defaultValue="My initial value" />\n')),Object(r.b)("h3",{id:"keepvalue"},Object(r.b)("inlineCode",{parentName:"h3"},"keepValue")),Object(r.b)("p",null,"Set to ",Object(r.b)("inlineCode",{parentName:"p"},"true")," to keep the value when the field is unmounted from the DOM. (default is ",Object(r.b)("inlineCode",{parentName:"p"},"false"),")."),Object(r.b)("h3",{id:"formatvaluefieldvalue"},Object(r.b)("inlineCode",{parentName:"h3"},"formatValue(fieldValue)")),Object(r.b)("p",null,"Format the value before saving it into the internal state."),Object(r.b)("h3",{id:"onchangefieldvalue"},Object(r.b)("inlineCode",{parentName:"h3"},"onChange(fieldValue)")),Object(r.b)("p",null,"Triggered everytime that setValue() is called inside the field."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-jsx"}),'<Field name="myFieldName" onChange={val => console.log(val)} />\n')),Object(r.b)("h3",{id:"required"},Object(r.b)("inlineCode",{parentName:"h3"},"required")),Object(r.b)("p",null,"Shortcut for isRequired() validation"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-jsx"}),'<Field name="myFieldName" required />\n<Field name="myFieldName" required="Field is required" />\n')),Object(r.b)("h3",{id:"validations"},Object(r.b)("inlineCode",{parentName:"h3"},"validations")),Object(r.b)("p",null,"An array of object with:"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"rule(fieldValue, formValues)"),": Built in validation rule or custom validation function (must return ",Object(r.b)("inlineCode",{parentName:"li"},"true")," if the rule is valid)."),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"deps"),": Array of external values used in the rule function (like array of dependencies in useEffect)."),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"message"),": The message if the rule is invalid.")),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-jsx"}),"<Field\n  name=\"myFieldName\"\n  validations={[\n    {\n      rule: isRequired(),\n      message: 'Field is required',\n    },\n    {\n      rule: isNotEmptyString(),\n      message: 'Field can\\'t be empty',\n    },\n    {\n      rule: (value) => value.toLowerCase() !== 'john',\n      message: 'Field can\\'t be john',\n    },\n    {\n      rule: (value) => value !== externalValue,\n      deps: [externalValue],\n      message: 'Field can\\'t be the same as external value',\n    },\n  ]}\n/>\n")),Object(r.b)("hr",null),Object(r.b)("h2",{id:"proptypes-validations"},"PropTypes validations"),Object(r.b)("p",null,"If you using ",Object(r.b)("a",Object(a.a)({parentName:"p"},{href:"https://www.npmjs.com/package/prop-types"}),"prop-types")," to document props in your project,\nyou can get ",Object(r.b)("inlineCode",{parentName:"p"},"fieldPropTypes")," and ",Object(r.b)("inlineCode",{parentName:"p"},"fieldDefaultProps")," from ",Object(r.b)("inlineCode",{parentName:"p"},"@formiz/core")," to pass to your custom fields for PropTypes validations."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-jsx"}),"// MyField.js\nimport React from 'react'\nimport { useField, fieldPropTypes, fieldDefaultProps } from '@formiz/core'\n\nconst MyField = (props) => {\n  // ...\n}\n\nMyField.propTypes = {\n  ...fieldPropTypes,\n  // Your custom props\n}\n\nMyField.defaultProps = {\n  ...fieldDefaultProps,\n  // Your custom props\n}\n")))}u.isMDXComponent=!0}}]);