(window.webpackJsonp=window.webpackJsonp||[]).push([[19],{148:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return a})),n.d(t,"metadata",(function(){return i})),n.d(t,"rightToc",(function(){return l})),n.d(t,"default",(function(){return c}));var s=n(2),r=n(9),o=(n(0),n(164)),a={id:"use-form",title:"useForm() hook"},i={id:"core/use-form",title:"useForm() hook",description:"Use this hook to access values and methods from a `` component.",source:"@site/docs/core/useForm-hook.mdx",permalink:"/docs/core/use-form",editUrl:"https://github.com/ivan-dalmet/formiz/edit/master/documentation/docs/core/useForm-hook.mdx",sidebar:"docs",previous:{title:"<FormizStep> component",permalink:"/docs/core/formiz-step"},next:{title:"useField() hook",permalink:"/docs/core/use-field"}},l=[{value:"Usage from outside <code>&lt;Formiz&gt;</code>",id:"usage-from-outside-formiz",children:[]},{value:"Usage from a child component of <code>&lt;Formiz&gt;</code>",id:"usage-from-a-child-component-of-formiz",children:[]},{value:"Hook options",id:"hook-options",children:[{value:"subscribe",id:"subscribe",children:[]}]},{value:"Form actions",id:"form-actions",children:[{value:"submit()",id:"submit",children:[]},{value:"submitStep()",id:"submitstep",children:[]},{value:"invalidateFields(objectOfErrors)",id:"invalidatefieldsobjectoferrors",children:[]},{value:"setFieldsValues(objectOfValues)",id:"setfieldsvaluesobjectofvalues",children:[]},{value:"reset()",id:"reset",children:[]},{value:"getFieldStepName(fieldName)",id:"getfieldstepnamefieldname",children:[]},{value:"nextStep()",id:"nextstep",children:[]},{value:"prevStep()",id:"prevstep",children:[]},{value:"goToStep(name)",id:"gotostepname",children:[]}]},{value:"Form state",id:"form-state",children:[{value:"isValid",id:"isvalid",children:[]},{value:"isValidating",id:"isvalidating",children:[]},{value:"isSubmitted",id:"issubmitted",children:[]},{value:"resetKey",id:"resetkey",children:[]},{value:"currentStep",id:"currentstep",children:[]},{value:"steps",id:"steps",children:[]},{value:"isStepPristine",id:"issteppristine",children:[]},{value:"isStepValid",id:"isstepvalid",children:[]},{value:"isStepValidating",id:"isstepvalidating",children:[]},{value:"isStepSubmitted",id:"isstepsubmitted",children:[]},{value:"isFirstStep",id:"isfirststep",children:[]},{value:"isLastStep",id:"islaststep",children:[]}]},{value:"Fields state",id:"fields-state",children:[{value:"values",id:"values",children:[]}]}],m={rightToc:l};function c(e){var t=e.components,n=Object(r.a)(e,["components"]);return Object(o.b)("wrapper",Object(s.a)({},m,n,{components:t,mdxType:"MDXLayout"}),Object(o.b)("p",null,"Use this hook to access values and methods from a ",Object(o.b)("inlineCode",{parentName:"p"},"<Formiz>")," component."),Object(o.b)("h2",{id:"usage-from-outside-formiz"},"Usage from outside ",Object(o.b)("inlineCode",{parentName:"h2"},"<Formiz>")),Object(o.b)("h4",{id:"1-connect-your-form"},"1. Connect your form"),Object(o.b)("pre",null,Object(o.b)("code",Object(s.a)({parentName:"pre"},{className:"language-jsx"}),"import React from 'react'\nimport { Formiz, useForm } from '@formiz/core'\nimport { MyField } from './MyField'\n\nexport const MyForm = () => {\n  const myForm = useForm()\n\n  return (\n    <Formiz connect={myForm}>\n      {/* Your fields here */}\n    </Formiz>\n  )\n}\n")),Object(o.b)("h4",{id:"2-access-values-and-methods"},"2. Access values and methods"),Object(o.b)("p",null,"You have now access to the form."),Object(o.b)("pre",null,Object(o.b)("code",Object(s.a)({parentName:"pre"},{className:"language-jsx"}),"import React from 'react'\nimport { Formiz, useForm } from '@formiz/core'\nimport { MyField } from './MyField'\n\nexport const MyForm = () => {\n  const myForm = useForm()\n\n  return (\n    <Formiz connect={myForm}>\n      <form onSubmit={myForm.submit}>\n        {myForm.isValid && 'The form is valid!'}\n        {/* Your fields here */}\n        <button type=\"submit\">\n          Submit\n        </button>\n      <form>\n    </Formiz>\n  )\n}\n")),Object(o.b)("h2",{id:"usage-from-a-child-component-of-formiz"},"Usage from a child component of ",Object(o.b)("inlineCode",{parentName:"h2"},"<Formiz>")),Object(o.b)("pre",null,Object(o.b)("code",Object(s.a)({parentName:"pre"},{className:"language-jsx"}),"import React from 'react'\nimport { Formiz, useForm } from '@formiz/core'\nimport { MyField } from './MyField'\n\nexport const MySubComponent = () => {\n  const myForm = useForm()\n\n  return myForm.isValid && 'The form is valid!';\n}\n\nexport const MyForm = () => {\n  return (\n    <Formiz>\n      ...\n      <MySubComponent />\n      ...\n    </Formiz>\n  )\n}\n")),Object(o.b)("hr",null),Object(o.b)("h2",{id:"hook-options"},"Hook options"),Object(o.b)("h3",{id:"subscribe"},"subscribe"),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},"TL;DR Use this option for performance optimization only")),Object(o.b)("p",null,"The ",Object(o.b)("inlineCode",{parentName:"p"},"subscribe")," option allows you to tell which part of the internal state you want to subscribe to.\nBy default, you subscribe to the complete internal state. But for performance optimizations, you can choose exactly what you want."),Object(o.b)("p",null,"Each time the internal state is updated, the component with the ",Object(o.b)("inlineCode",{parentName:"p"},"useForm()")," is updated.\nWith this you can avoid many unecessary rerender and optimize your application by choosing only what you want to subscribe to."),Object(o.b)("h5",{id:"available-values"},"Available values"),Object(o.b)("pre",null,Object(o.b)("code",Object(s.a)({parentName:"pre"},{className:"language-js"}),"// Subscribe to form & fields state (default)\nuseForm()\n/* same as */ useForm({ subscribe: true })\n/* same as */ useForm({ subscribe: { form: true, fields: true } })\n\n// Subscribe to nothing (only access to form actions)\nuseForm({ subscribe: false })\n/* same as */ useForm({ subscribe: { form: false, fields: false } })\n\n// Subscribe to form state\nuseForm({ subscribe: 'form' })\n/* same as */ useForm({ subscribe: { form: true } })\n/* same as */ useForm({ subscribe: { form: true, fields: false } })\n\n// Subscribe to fields state\nuseForm({ subscribe: 'fields' })\n/* same as */ useForm({ subscribe: { fields: true } })\n/* same as */ useForm({ subscribe: { form: false, fields: true } })\n\n// Subscribe to form state & only to some fields\nuseForm({ subscribe: { form: true, fields: ['email', 'password'] } })\n\n// Subscribe only to some fields\nuseForm({ subscribe: { fields: ['email', 'password'] } })\n")),Object(o.b)("hr",null),Object(o.b)("h2",{id:"form-actions"},"Form actions"),Object(o.b)("p",null,"The ",Object(o.b)("inlineCode",{parentName:"p"},"useForm")," return an object with the following properties:"),Object(o.b)("h3",{id:"submit"},"submit()"),Object(o.b)("p",null,"Allow you to submit the form"),Object(o.b)("pre",null,Object(o.b)("code",Object(s.a)({parentName:"pre"},{className:"language-jsx"}),'<Formiz connect={myForm}>\n  <form onSubmit={myForm.submit}>\n    {/* Your fields here */}\n    <button type="submit">\n      Submit\n    </button>\n  </form>\n</Formiz>\n')),Object(o.b)("h3",{id:"submitstep"},"submitStep()"),Object(o.b)("p",null,"Allows you to submit the current step."),Object(o.b)("pre",null,Object(o.b)("code",Object(s.a)({parentName:"pre"},{className:"language-jsx"}),'<Formiz connect={myForm}>\n  <form onSubmit={myForm.submitStep}>\n    <FormizStep name="step1">\n      {/* Your fields here */}\n    </FormizStep>\n    <FormizStep name="step2">\n      {/* Your fields here */}\n    </FormizStep>\n    <button type="submit">\n      Submit\n    </button>\n  </form>\n</Formiz>\n')),Object(o.b)("h3",{id:"invalidatefieldsobjectoferrors"},"invalidateFields(objectOfErrors)"),Object(o.b)("p",null,"Allow you to invalidate one or many fields.",Object(o.b)("br",null),"\nUseful for API errors or other external errors."),Object(o.b)("pre",null,Object(o.b)("code",Object(s.a)({parentName:"pre"},{className:"language-js"}),"invalidateFields({\n  'fieldName': 'My error message',\n  'secondFieldName': 'Another error message',\n})\n")),Object(o.b)("h3",{id:"setfieldsvaluesobjectofvalues"},"setFieldsValues(objectOfValues)"),Object(o.b)("p",null,"Allow you to change the value of one or many fields imperatively.",Object(o.b)("br",null),"\nUseful to change one or many values based on an external action."),Object(o.b)("p",null,"\u26a0\ufe0f Don't use ",Object(o.b)("inlineCode",{parentName:"p"},"undefined")," as new value, it will not trigger the update (use ",Object(o.b)("inlineCode",{parentName:"p"},"null")," instead)."),Object(o.b)("pre",null,Object(o.b)("code",Object(s.a)({parentName:"pre"},{className:"language-js"}),"setFieldsValues({\n  'fieldName': 'New value',\n  'secondFieldName': 'Another new value',\n})\n")),Object(o.b)("h3",{id:"reset"},"reset()"),Object(o.b)("p",null,"Allows to reset the form with all fields values to their defaultValue."),Object(o.b)("pre",null,Object(o.b)("code",Object(s.a)({parentName:"pre"},{className:"language-jsx"}),"const myForm = useForm()\nmyForm.reset() // Trigger the form reset\n")),Object(o.b)("h3",{id:"getfieldstepnamefieldname"},"getFieldStepName(fieldName)"),Object(o.b)("p",null,"Allows you to get the step name of a field."),Object(o.b)("pre",null,Object(o.b)("code",Object(s.a)({parentName:"pre"},{className:"language-jsx"}),"const myForm = useForm()\nconst stepNameOfEmail = myForm.getFieldStepName('email')\nmyForm.goToStep(stepNameOfEmail) // Navigate to the email field step\n")),Object(o.b)("h3",{id:"nextstep"},"nextStep()"),Object(o.b)("p",null,"Move to the next step."),Object(o.b)("pre",null,Object(o.b)("code",Object(s.a)({parentName:"pre"},{className:"language-jsx"}),"const myForm = useForm()\nmyForm.nextStep() // Go to the next step\n")),Object(o.b)("h3",{id:"prevstep"},"prevStep()"),Object(o.b)("p",null,"Move to the previous step."),Object(o.b)("pre",null,Object(o.b)("code",Object(s.a)({parentName:"pre"},{className:"language-jsx"}),"const myForm = useForm()\nmyForm.prevStep() // Go to the previous step\n")),Object(o.b)("h3",{id:"gotostepname"},"goToStep(name)"),Object(o.b)("p",null,"Go to a specific step."),Object(o.b)("pre",null,Object(o.b)("code",Object(s.a)({parentName:"pre"},{className:"language-jsx"}),"const myForm = useForm()\nmyForm.goToStep('my-step') // Go to the step with the name 'my-step'\n")),Object(o.b)("h2",{id:"form-state"},"Form state"),Object(o.b)("h3",{id:"isvalid"},"isValid"),Object(o.b)("p",null,"Returns true if the form is valid."),Object(o.b)("pre",null,Object(o.b)("code",Object(s.a)({parentName:"pre"},{className:"language-jsx"}),"const myForm = useForm()\nmyForm.isValid // true or false\n")),Object(o.b)("h3",{id:"isvalidating"},"isValidating"),Object(o.b)("p",null,"Returns true if one field or more is running async validations."),Object(o.b)("pre",null,Object(o.b)("code",Object(s.a)({parentName:"pre"},{className:"language-jsx"}),"const myForm = useForm()\nmyForm.isValidating // true or false\n")),Object(o.b)("h3",{id:"issubmitted"},"isSubmitted"),Object(o.b)("p",null,"Returns true if the form is submitted."),Object(o.b)("pre",null,Object(o.b)("code",Object(s.a)({parentName:"pre"},{className:"language-jsx"}),"const myForm = useForm()\nmyForm.isSubmitted // true or false\n")),Object(o.b)("h3",{id:"resetkey"},"resetKey"),Object(o.b)("p",null,"Allows you to reset some internal state when the form is reset."),Object(o.b)("pre",null,Object(o.b)("code",Object(s.a)({parentName:"pre"},{className:"language-jsx"}),"const myForm = useForm()\n\nuseEffect(() => {\n  /* Do a side effect on reset */\n}, [form.resetKey])\n")),Object(o.b)("h3",{id:"currentstep"},"currentStep"),Object(o.b)("p",null,"Returns the current step object."),Object(o.b)("pre",null,Object(o.b)("code",Object(s.a)({parentName:"pre"},{className:"language-js"}),"// currentStep properties\n{\n  index: number;\n  name: string;\n  label?: React.ReactNode;\n  isPristine: boolean;\n  isValid: boolean;\n  isValidating: boolean;\n  isVisited: boolean;\n  isSubmitted: boolean;\n}\n")),Object(o.b)("pre",null,Object(o.b)("code",Object(s.a)({parentName:"pre"},{className:"language-jsx"}),"const myForm = useForm()\nmyForm.currentStep?.name // step-name\n")),Object(o.b)("h3",{id:"steps"},"steps"),Object(o.b)("p",null,"Returns an array with all the steps of the form."),Object(o.b)("pre",null,Object(o.b)("code",Object(s.a)({parentName:"pre"},{className:"language-js"}),"// Properties for each steps\n{\n  index: number;\n  name: string;\n  label?: React.ReactNode;\n  isPristine: boolean;\n  isValid: boolean;\n  isValidating: boolean;\n  isVisited: boolean;\n  isSubmitted: boolean;\n}\n")),Object(o.b)("pre",null,Object(o.b)("code",Object(s.a)({parentName:"pre"},{className:"language-jsx"}),"const myForm = useForm()\n\nreturn (\n  <ul>\n    {myForm.steps?.map((step) => (\n      <li key={step.name}>\n        {step.isValid ? '\u2705' : '\u274c'}\n        {' '}\n        {step.label || step.name}\n      </li>\n    ))}\n  </ul>\n)\n")),Object(o.b)("h3",{id:"issteppristine"},"isStepPristine"),Object(o.b)("p",null,"Returns true if all the fields are pristine on the current step."),Object(o.b)("pre",null,Object(o.b)("code",Object(s.a)({parentName:"pre"},{className:"language-jsx"}),"const myForm = useForm()\nmyForm.isStepValid // true or false\n")),Object(o.b)("h3",{id:"isstepvalid"},"isStepValid"),Object(o.b)("p",null,"Returns true if all the fields are valid on the current step."),Object(o.b)("pre",null,Object(o.b)("code",Object(s.a)({parentName:"pre"},{className:"language-jsx"}),"const myForm = useForm()\nmyForm.isStepValid // true or false\n")),Object(o.b)("h3",{id:"isstepvalidating"},"isStepValidating"),Object(o.b)("p",null,"Returns true if one field or more is running async validations on the current step."),Object(o.b)("pre",null,Object(o.b)("code",Object(s.a)({parentName:"pre"},{className:"language-jsx"}),"const myForm = useForm()\nmyForm.isStepValid // true or false\n")),Object(o.b)("h3",{id:"isstepsubmitted"},"isStepSubmitted"),Object(o.b)("p",null,"Returns true if the current step is submitted."),Object(o.b)("pre",null,Object(o.b)("code",Object(s.a)({parentName:"pre"},{className:"language-jsx"}),"const myForm = useForm()\nmyForm.isStepSubmitted // true or false\n")),Object(o.b)("h3",{id:"isfirststep"},"isFirstStep"),Object(o.b)("p",null,"Returns true if the current step is the first step."),Object(o.b)("pre",null,Object(o.b)("code",Object(s.a)({parentName:"pre"},{className:"language-jsx"}),"const myForm = useForm()\nmyForm.isFirstStep // true or false\n")),Object(o.b)("h3",{id:"islaststep"},"isLastStep"),Object(o.b)("p",null,"Returns true if the current step is the last step."),Object(o.b)("pre",null,Object(o.b)("code",Object(s.a)({parentName:"pre"},{className:"language-jsx"}),"const myForm = useForm()\nmyForm.isLastStep // true or false\n")),Object(o.b)("h2",{id:"fields-state"},"Fields state"),Object(o.b)("h3",{id:"values"},"values"),Object(o.b)("p",null,"Returns an object with all the values of the form.",Object(o.b)("br",null),"\nSee ",Object(o.b)("a",Object(s.a)({parentName:"p"},{href:"/docs/core/use-field#name-"}),"the ",Object(o.b)("inlineCode",{parentName:"a"},"name")," props for fields")," for nested objects and array values."),Object(o.b)("pre",null,Object(o.b)("code",Object(s.a)({parentName:"pre"},{className:"language-jsx"}),"const myForm = useForm()\nmyForm.values // { fieldA: 'field A value', fieldB: 'field B value' }\n")))}c.isMDXComponent=!0}}]);