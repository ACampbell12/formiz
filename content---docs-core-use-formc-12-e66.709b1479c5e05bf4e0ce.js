(window.webpackJsonp=window.webpackJsonp||[]).push([[8],{46:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return a})),n.d(t,"rightToc",(function(){return l})),n.d(t,"default",(function(){return s}));n(0);var r=n(61);function o(){return(o=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}function i(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var a={id:"use-form",title:"useForm() hook"},l=[{value:"Usage from outside <Formiz>",id:"usage-from-outside-formiz",children:[]},{value:"Usage from a child component of <Formiz>",id:"usage-from-a-child-component-of-formiz",children:[]},{value:"Hook values",id:"hook-values",children:[{value:"submit()",id:"submit",children:[]},{value:"isValid",id:"isvalid",children:[]},{value:"isSubmitted",id:"issubmitted",children:[]},{value:"values",id:"values",children:[]},{value:"invalidateFields()",id:"invalidatefields",children:[]},{value:"reset()",id:"reset",children:[]},{value:"getFieldStepName(fieldName)",id:"getfieldstepnamefieldname",children:[]},{value:"currentStep",id:"currentstep",children:[]},{value:"steps",id:"steps",children:[]},{value:"isStepValid",id:"isstepvalid",children:[]},{value:"isStepSubmitted",id:"isstepsubmitted",children:[]},{value:"isFirstStep",id:"isfirststep",children:[]},{value:"isLastStep",id:"islaststep",children:[]},{value:"submitStep()",id:"submitstep",children:[]},{value:"nextStep()",id:"nextstep",children:[]},{value:"prevStep()",id:"prevstep",children:[]},{value:"goToStep(name)",id:"gotostepname",children:[]}]}],b={rightToc:l},c="wrapper";function s(e){var t=e.components,n=i(e,["components"]);return Object(r.b)(c,o({},b,n,{components:t,mdxType:"MDXLayout"}),Object(r.b)("p",null,"Use this hook to access values and methods from a ",Object(r.b)("inlineCode",{parentName:"p"},"<Formiz>")," component."),Object(r.b)("h2",{id:"usage-from-outside-formiz"},"Usage from outside ",Object(r.b)("inlineCode",{parentName:"h2"},"<Formiz>")),Object(r.b)("h4",{id:"1-connect-your-form"},"1. Connect your form"),Object(r.b)("pre",null,Object(r.b)("code",o({parentName:"pre"},{className:"language-jsx"}),"import React from 'react'\nimport { Formiz, useForm } from '@formiz/core'\nimport { MyField } from './MyField'\n\nexport const MyForm = () => {\n  const myForm = useForm()\n\n  return (\n    <Formiz connect={myForm}>\n      {/* Your fields here */}\n    </Formiz>\n  )\n}\n")),Object(r.b)("h4",{id:"2-access-values-and-methods"},"2. Access values and methods"),Object(r.b)("p",null,"You have now access to the form."),Object(r.b)("pre",null,Object(r.b)("code",o({parentName:"pre"},{className:"language-jsx"}),"import React from 'react'\nimport { Formiz, useForm } from '@formiz/core'\nimport { MyField } from './MyField'\n\nexport const MyForm = () => {\n  const myForm = useForm()\n\n  return (\n    <Formiz connect={myForm}>\n      <form onSubmit={myForm.submit}>\n        {myForm.isValid && 'The form is valid!'}\n        {/* Your fields here */}\n        <button type=\"submit\">\n          Submit\n        </button>\n      <form>\n    </Formiz>\n  )\n}\n")),Object(r.b)("h2",{id:"usage-from-a-child-component-of-formiz"},"Usage from a child component of ",Object(r.b)("inlineCode",{parentName:"h2"},"<Formiz>")),Object(r.b)("pre",null,Object(r.b)("code",o({parentName:"pre"},{className:"language-jsx"}),"import React from 'react'\nimport { Formiz, useForm } from '@formiz/core'\nimport { MyField } from './MyField'\n\nexport const MySubComponent = () => {\n  const myForm = useForm()\n\n  return myForm.isValid && 'The form is valid!';\n}\n\nexport const MyForm = () => {\n  return (\n    <Formiz>\n      ...\n      <MySubComponent />\n      ...\n    </Formiz>\n  )\n}\n")),Object(r.b)("hr",null),Object(r.b)("h2",{id:"hook-values"},"Hook values"),Object(r.b)("p",null,"The ",Object(r.b)("inlineCode",{parentName:"p"},"useForm")," return an object with the following properties:"),Object(r.b)("h3",{id:"submit"},Object(r.b)("inlineCode",{parentName:"h3"},"submit()")),Object(r.b)("blockquote",null,Object(r.b)("p",{parentName:"blockquote"},"Allow you to submit the form")),Object(r.b)("pre",null,Object(r.b)("code",o({parentName:"pre"},{className:"language-jsx"}),'<Formiz connect={myForm}>\n  <form onSubmit={myForm.submit}>\n    {/* Your fields here */}\n    <button type="submit">\n      Submit\n    </button>\n  </form>\n</Formiz>\n')),Object(r.b)("h3",{id:"isvalid"},Object(r.b)("inlineCode",{parentName:"h3"},"isValid")),Object(r.b)("blockquote",null,Object(r.b)("p",{parentName:"blockquote"},"Returns true if the form is valid.")),Object(r.b)("h3",{id:"issubmitted"},Object(r.b)("inlineCode",{parentName:"h3"},"isSubmitted")),Object(r.b)("blockquote",null,Object(r.b)("p",{parentName:"blockquote"},"Returns true if the form is submitted.")),Object(r.b)("h3",{id:"values"},Object(r.b)("inlineCode",{parentName:"h3"},"values")),Object(r.b)("blockquote",null,Object(r.b)("p",{parentName:"blockquote"},"Returns an object with all the values of the form.")),Object(r.b)("h3",{id:"invalidatefields"},Object(r.b)("inlineCode",{parentName:"h3"},"invalidateFields()")),Object(r.b)("blockquote",null,Object(r.b)("p",{parentName:"blockquote"},"Allow you to invalidate one or many fields.",Object(r.b)("br",null),"\nUseful for API errors or other external errors.")),Object(r.b)("pre",null,Object(r.b)("code",o({parentName:"pre"},{className:"language-js"}),"invalidateFields([\n  'fieldName': 'My error message',\n  'secondFieldName': 'Another error message',\n])\n")),Object(r.b)("h3",{id:"reset"},Object(r.b)("inlineCode",{parentName:"h3"},"reset()")),Object(r.b)("blockquote",null,Object(r.b)("p",{parentName:"blockquote"},"Allows to reset the form with all fields values to their defaultValue.")),Object(r.b)("h3",{id:"getfieldstepnamefieldname"},Object(r.b)("inlineCode",{parentName:"h3"},"getFieldStepName(fieldName)")),Object(r.b)("blockquote",null,Object(r.b)("p",{parentName:"blockquote"},"Allows you to get the step name of a field.")),Object(r.b)("h3",{id:"currentstep"},Object(r.b)("inlineCode",{parentName:"h3"},"currentStep")),Object(r.b)("blockquote",null,Object(r.b)("p",{parentName:"blockquote"},"Returns the current step name.")),Object(r.b)("h3",{id:"steps"},Object(r.b)("inlineCode",{parentName:"h3"},"steps")),Object(r.b)("blockquote",null,Object(r.b)("p",{parentName:"blockquote"},"Returns an array with all the steps of the form.")),Object(r.b)("h3",{id:"isstepvalid"},Object(r.b)("inlineCode",{parentName:"h3"},"isStepValid")),Object(r.b)("blockquote",null,Object(r.b)("p",{parentName:"blockquote"},"Returns true if the current step is valid.\nReturns an array with all the steps of the form.")),Object(r.b)("h3",{id:"isstepsubmitted"},Object(r.b)("inlineCode",{parentName:"h3"},"isStepSubmitted")),Object(r.b)("blockquote",null,Object(r.b)("p",{parentName:"blockquote"},"Returns true if the current step is submitted.")),Object(r.b)("h3",{id:"isfirststep"},Object(r.b)("inlineCode",{parentName:"h3"},"isFirstStep")),Object(r.b)("blockquote",null,Object(r.b)("p",{parentName:"blockquote"},"Returns true if the current step is the first step.")),Object(r.b)("h3",{id:"islaststep"},Object(r.b)("inlineCode",{parentName:"h3"},"isLastStep")),Object(r.b)("blockquote",null,Object(r.b)("p",{parentName:"blockquote"},"Returns true if the current step is the last step.")),Object(r.b)("h3",{id:"submitstep"},Object(r.b)("inlineCode",{parentName:"h3"},"submitStep()")),Object(r.b)("blockquote",null,Object(r.b)("p",{parentName:"blockquote"},"Allows you to submit the current step.")),Object(r.b)("pre",null,Object(r.b)("code",o({parentName:"pre"},{className:"language-jsx"}),'<Formiz connect={myForm}>\n  <form onSubmit={myForm.submitStep}>\n    <FormizStep name="step1">\n      {/* Your fields here */}\n    </FormizStep>\n    <FormizStep name="step2">\n      {/* Your fields here */}\n    </FormizStep>\n    <button type="submit">\n      Submit\n    </button>\n  </form>\n</Formiz>\n')),Object(r.b)("h3",{id:"nextstep"},Object(r.b)("inlineCode",{parentName:"h3"},"nextStep()")),Object(r.b)("blockquote",null,Object(r.b)("p",{parentName:"blockquote"},"Move to the next step.")),Object(r.b)("h3",{id:"prevstep"},Object(r.b)("inlineCode",{parentName:"h3"},"prevStep()")),Object(r.b)("blockquote",null,Object(r.b)("p",{parentName:"blockquote"},"Move to the previous step.")),Object(r.b)("h3",{id:"gotostepname"},Object(r.b)("inlineCode",{parentName:"h3"},"goToStep(name)")),Object(r.b)("blockquote",null,Object(r.b)("p",{parentName:"blockquote"},"Go to a specific step.")))}s.isMDXComponent=!0},61:function(e,t,n){"use strict";n.d(t,"a",(function(){return l})),n.d(t,"b",(function(){return u}));var r=n(0),o=n.n(r),i=o.a.createContext({}),a=function(e){var t=o.a.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):Object.assign({},t,e)),n},l=function(e){var t=a(e.components);return o.a.createElement(i.Provider,{value:t},e.children)};var b="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return o.a.createElement(o.a.Fragment,{},t)}},s=Object(r.forwardRef)((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,l=e.parentName,b=function(e,t){var n={};for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&-1===t.indexOf(r)&&(n[r]=e[r]);return n}(e,["components","mdxType","originalType","parentName"]),s=a(n),u=r,m=s[l+"."+u]||s[u]||c[u]||i;return n?o.a.createElement(m,Object.assign({},{ref:t},b,{components:n})):o.a.createElement(m,Object.assign({},{ref:t},b))}));function u(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,a=new Array(i);a[0]=s;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l[b]="string"==typeof e?e:r,a[1]=l;for(var u=2;u<i;u++)a[u]=n[u];return o.a.createElement.apply(null,a)}return o.a.createElement.apply(null,n)}s.displayName="MDXCreateElement"}}]);