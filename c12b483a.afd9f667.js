(window.webpackJsonp=window.webpackJsonp||[]).push([[17],{102:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return a})),n.d(t,"metadata",(function(){return s})),n.d(t,"rightToc",(function(){return c})),n.d(t,"default",(function(){return d}));var o=n(1),r=n(6),i=(n(0),n(114)),a={id:"use-form",title:"useForm() hook"},s={id:"core/use-form",title:"useForm() hook",description:"Use this hook to access values and methods from a `<Formiz>` component.",source:"@site/docs/core/useForm-hook.mdx",permalink:"/docs/core/use-form",sidebar:"docs",previous:{title:"<FormizStep> component",permalink:"/docs/core/formiz-step"},next:{title:"useField() hook",permalink:"/docs/core/use-field"}},c=[{value:"Usage from outside <code>&lt;Formiz&gt;</code>",id:"usage-from-outside-formiz",children:[]},{value:"Usage from a child component of <code>&lt;Formiz&gt;</code>",id:"usage-from-a-child-component-of-formiz",children:[]},{value:"Hook values",id:"hook-values",children:[{value:"<code>submit()</code>",id:"submit",children:[]},{value:"<code>isValid</code>",id:"isvalid",children:[]},{value:"<code>isSubmitted</code>",id:"issubmitted",children:[]},{value:"<code>values</code>",id:"values",children:[]},{value:"<code>invalidateFields()</code>",id:"invalidatefields",children:[]},{value:"<code>reset()</code>",id:"reset",children:[]},{value:"<code>resetKey</code>",id:"resetkey",children:[]},{value:"<code>getFieldStepName(fieldName)</code>",id:"getfieldstepnamefieldname",children:[]},{value:"<code>currentStep</code>",id:"currentstep",children:[]},{value:"<code>steps</code>",id:"steps",children:[]},{value:"<code>isStepValid</code>",id:"isstepvalid",children:[]},{value:"<code>isStepSubmitted</code>",id:"isstepsubmitted",children:[]},{value:"<code>isFirstStep</code>",id:"isfirststep",children:[]},{value:"<code>isLastStep</code>",id:"islaststep",children:[]},{value:"<code>submitStep()</code>",id:"submitstep",children:[]},{value:"<code>nextStep()</code>",id:"nextstep",children:[]},{value:"<code>prevStep()</code>",id:"prevstep",children:[]},{value:"<code>goToStep(name)</code>",id:"gotostepname",children:[]}]}],l={rightToc:c},m="wrapper";function d(e){var t=e.components,n=Object(r.a)(e,["components"]);return Object(i.b)(m,Object(o.a)({},l,n,{components:t,mdxType:"MDXLayout"}),Object(i.b)("p",null,"Use this hook to access values and methods from a ",Object(i.b)("inlineCode",{parentName:"p"},"<Formiz>")," component."),Object(i.b)("h2",{id:"usage-from-outside-formiz"},"Usage from outside ",Object(i.b)("inlineCode",{parentName:"h2"},"<Formiz>")),Object(i.b)("h4",{id:"1-connect-your-form"},"1. Connect your form"),Object(i.b)("pre",null,Object(i.b)("code",Object(o.a)({parentName:"pre"},{className:"language-jsx"}),"import React from 'react'\nimport { Formiz, useForm } from '@formiz/core'\nimport { MyField } from './MyField'\n\nexport const MyForm = () => {\n  const myForm = useForm()\n\n  return (\n    <Formiz connect={myForm}>\n      {/* Your fields here */}\n    </Formiz>\n  )\n}\n")),Object(i.b)("h4",{id:"2-access-values-and-methods"},"2. Access values and methods"),Object(i.b)("p",null,"You have now access to the form."),Object(i.b)("pre",null,Object(i.b)("code",Object(o.a)({parentName:"pre"},{className:"language-jsx"}),"import React from 'react'\nimport { Formiz, useForm } from '@formiz/core'\nimport { MyField } from './MyField'\n\nexport const MyForm = () => {\n  const myForm = useForm()\n\n  return (\n    <Formiz connect={myForm}>\n      <form onSubmit={myForm.submit}>\n        {myForm.isValid && 'The form is valid!'}\n        {/* Your fields here */}\n        <button type=\"submit\">\n          Submit\n        </button>\n      <form>\n    </Formiz>\n  )\n}\n")),Object(i.b)("h2",{id:"usage-from-a-child-component-of-formiz"},"Usage from a child component of ",Object(i.b)("inlineCode",{parentName:"h2"},"<Formiz>")),Object(i.b)("pre",null,Object(i.b)("code",Object(o.a)({parentName:"pre"},{className:"language-jsx"}),"import React from 'react'\nimport { Formiz, useForm } from '@formiz/core'\nimport { MyField } from './MyField'\n\nexport const MySubComponent = () => {\n  const myForm = useForm()\n\n  return myForm.isValid && 'The form is valid!';\n}\n\nexport const MyForm = () => {\n  return (\n    <Formiz>\n      ...\n      <MySubComponent />\n      ...\n    </Formiz>\n  )\n}\n")),Object(i.b)("hr",null),Object(i.b)("h2",{id:"hook-values"},"Hook values"),Object(i.b)("p",null,"The ",Object(i.b)("inlineCode",{parentName:"p"},"useForm")," return an object with the following properties:"),Object(i.b)("h3",{id:"submit"},Object(i.b)("inlineCode",{parentName:"h3"},"submit()")),Object(i.b)("p",null,"Allow you to submit the form"),Object(i.b)("pre",null,Object(i.b)("code",Object(o.a)({parentName:"pre"},{className:"language-jsx"}),'<Formiz connect={myForm}>\n  <form onSubmit={myForm.submit}>\n    {/* Your fields here */}\n    <button type="submit">\n      Submit\n    </button>\n  </form>\n</Formiz>\n')),Object(i.b)("h3",{id:"isvalid"},Object(i.b)("inlineCode",{parentName:"h3"},"isValid")),Object(i.b)("p",null,"Returns true if the form is valid."),Object(i.b)("h3",{id:"issubmitted"},Object(i.b)("inlineCode",{parentName:"h3"},"isSubmitted")),Object(i.b)("p",null,"Returns true if the form is submitted."),Object(i.b)("h3",{id:"values"},Object(i.b)("inlineCode",{parentName:"h3"},"values")),Object(i.b)("p",null,"Returns an object with all the values of the form."),Object(i.b)("h3",{id:"invalidatefields"},Object(i.b)("inlineCode",{parentName:"h3"},"invalidateFields()")),Object(i.b)("p",null,"Allow you to invalidate one or many fields.",Object(i.b)("br",null),"\nUseful for API errors or other external errors."),Object(i.b)("pre",null,Object(i.b)("code",Object(o.a)({parentName:"pre"},{className:"language-js"}),"invalidateFields({\n  'fieldName': 'My error message',\n  'secondFieldName': 'Another error message',\n})\n")),Object(i.b)("h3",{id:"reset"},Object(i.b)("inlineCode",{parentName:"h3"},"reset()")),Object(i.b)("p",null,"Allows to reset the form with all fields values to their defaultValue."),Object(i.b)("h3",{id:"resetkey"},Object(i.b)("inlineCode",{parentName:"h3"},"resetKey")),Object(i.b)("p",null,"Allows you to reset some internal state when the form is reset."),Object(i.b)("pre",null,Object(i.b)("code",Object(o.a)({parentName:"pre"},{className:"language-js"}),"useEffect(() => {\n  // Reset stuff here\n}, [myForm.resetKey]);\n")),Object(i.b)("h3",{id:"getfieldstepnamefieldname"},Object(i.b)("inlineCode",{parentName:"h3"},"getFieldStepName(fieldName)")),Object(i.b)("p",null,"Allows you to get the step name of a field."),Object(i.b)("h3",{id:"currentstep"},Object(i.b)("inlineCode",{parentName:"h3"},"currentStep")),Object(i.b)("p",null,"Returns the current step name."),Object(i.b)("h3",{id:"steps"},Object(i.b)("inlineCode",{parentName:"h3"},"steps")),Object(i.b)("p",null,"Returns an array with all the steps of the form."),Object(i.b)("h3",{id:"isstepvalid"},Object(i.b)("inlineCode",{parentName:"h3"},"isStepValid")),Object(i.b)("p",null,"Returns true if the current step is valid.\nReturns an array with all the steps of the form."),Object(i.b)("h3",{id:"isstepsubmitted"},Object(i.b)("inlineCode",{parentName:"h3"},"isStepSubmitted")),Object(i.b)("p",null,"Returns true if the current step is submitted."),Object(i.b)("h3",{id:"isfirststep"},Object(i.b)("inlineCode",{parentName:"h3"},"isFirstStep")),Object(i.b)("p",null,"Returns true if the current step is the first step."),Object(i.b)("h3",{id:"islaststep"},Object(i.b)("inlineCode",{parentName:"h3"},"isLastStep")),Object(i.b)("p",null,"Returns true if the current step is the last step."),Object(i.b)("h3",{id:"submitstep"},Object(i.b)("inlineCode",{parentName:"h3"},"submitStep()")),Object(i.b)("p",null,"Allows you to submit the current step."),Object(i.b)("pre",null,Object(i.b)("code",Object(o.a)({parentName:"pre"},{className:"language-jsx"}),'<Formiz connect={myForm}>\n  <form onSubmit={myForm.submitStep}>\n    <FormizStep name="step1">\n      {/* Your fields here */}\n    </FormizStep>\n    <FormizStep name="step2">\n      {/* Your fields here */}\n    </FormizStep>\n    <button type="submit">\n      Submit\n    </button>\n  </form>\n</Formiz>\n')),Object(i.b)("h3",{id:"nextstep"},Object(i.b)("inlineCode",{parentName:"h3"},"nextStep()")),Object(i.b)("p",null,"Move to the next step."),Object(i.b)("h3",{id:"prevstep"},Object(i.b)("inlineCode",{parentName:"h3"},"prevStep()")),Object(i.b)("p",null,"Move to the previous step."),Object(i.b)("h3",{id:"gotostepname"},Object(i.b)("inlineCode",{parentName:"h3"},"goToStep(name)")),Object(i.b)("p",null,"Go to a specific step."))}d.isMDXComponent=!0},114:function(e,t,n){"use strict";n.d(t,"a",(function(){return s})),n.d(t,"b",(function(){return d}));var o=n(0),r=n.n(o),i=r.a.createContext({}),a=function(e){var t=r.a.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):Object.assign({},t,e)),n},s=function(e){var t=a(e.components);return r.a.createElement(i.Provider,{value:t},e.children)};var c="mdxType",l={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},m=Object(o.forwardRef)((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,s=e.parentName,c=function(e,t){var n={};for(var o in e)Object.prototype.hasOwnProperty.call(e,o)&&-1===t.indexOf(o)&&(n[o]=e[o]);return n}(e,["components","mdxType","originalType","parentName"]),m=a(n),d=o,b=m[s+"."+d]||m[d]||l[d]||i;return n?r.a.createElement(b,Object.assign({},{ref:t},c,{components:n})):r.a.createElement(b,Object.assign({},{ref:t},c))}));function d(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,a=new Array(i);a[0]=m;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[c]="string"==typeof e?e:o,a[1]=s;for(var d=2;d<i;d++)a[d]=n[d];return r.a.createElement.apply(null,a)}return r.a.createElement.apply(null,n)}m.displayName="MDXCreateElement"}}]);